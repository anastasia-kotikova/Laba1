package org.example;
/**
 * Интерфейс для работы с связным списком.
 *
 * <p>Связный список - это линейная структура данных, состоящая из узлов, где каждый узел
 * содержит данные и ссылку(и) на соседние узлы. Реализация может быть односвязной
 * (только ссылка на следующий узел)-мой вариант или двусвязной (ссылки на предыдущий
 * и следующий узлы)</p>
 *
 * @param <T> тип элементов в списке
 * @author Анастасия Котикова
 */
public interface LinkedList<T> {
        /**
         * Добавляет указанный элемент в конец этого списка.
         *
         * @param element элемент, который нужно добавить в этот список
         * @throws IllegalArgumentException если указанный элемент равен null
         */
        void add(T element);

        /**
         * Возвращает элемент по указанной позиции в этом списке.
         *
         * @param index индекс возвращаемого элемента (отсчет с 0)
         * @return элемент по указанной позиции в этом списке
         * @throws IndexOutOfBoundsException если индекс выходит за допустимые пределы
         *         (index < 0 || index >= size())
         */
        T get(int index);

        /**
         * Удаляет элемент по указанной позиции в этом списке.
         * Сдвигает все последующие элементы влево (уменьшает их индексы на единицу).
         *
         * @param index индекс удаляемого элемента
         * @return элемент, который был удален из списка
         * @throws IndexOutOfBoundsException если индекс выходит за допустимые пределы
         *         (index < 0 || index >= size())
         */
        T remove(int index);

        /**
         * Удаляет первое вхождение указанного элемента из этого списка,если он присутствует.
         *
         * @param element элемент, который нужно удалить из этого списка, если он присутствует
         * @return true, если этот список содержал указанный элемент
         */
        boolean remove(T element);

        /**
         * Возвращает количество элементов в этом списке.
         *
         * @return количество элементов в этом списке
         */
        int size();

        /**
         * Возвращает true, если этот список не содержит элементов.
         *
         * @return true, если этот список не содержит элементов
         */
        boolean isEmpty();

        /**
         * Удаляет все элементы из этого списка.
         * Список будет пуст после возврата из этого метода.
         *
         */
        void clear();

        /**
         * Возвращает true, если этот список содержит указанный элемент.
         *
         * @param element элемент, наличие которого в этом списке проверяется
         * @return true, если этот список содержит указанный элемент
         */
        boolean contains(T element);

        /**
         * Возвращает индекс первого вхождения указанного элемента
         * в этом списке, или -1, если этот список не содержит элемент.
         *
         * @param element искомый элемент
         * @return индекс первого вхождения указанного элемента в
         * этом списке, или -1, если этот список не содержит элемент
         */
        int indexOf(T element);
}
