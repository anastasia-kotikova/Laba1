package org.example;

/**
 * Класс Node для реализации односвязного списка.
 * Представляет отдельный узел в связном списке.
 *
 * <p>Каждый узел содержит:
 * <ul>
 *   <li>Данные (data) - хранимый элемент</li>
 *   <li>Ссылку (next) - указатель на следующий узел в списке</li>
 * </ul>
 * </p>
 *
 * <p>Узлы являются фундаментальными строительными блоками связного списка
 * и соединяются между собой через ссылки, образуя цепочку элементов.</p>
 *
 * @param <T> тип элемента, хранимого в этом узле
 * @author Анастасия Котикова
 * @see LinkedListContainer
 */
class Node<T> {
    /**
     * Данные, хранимые в этом узле.
     * Может быть объектом любого типа, указанного при создании узла.
     */
    T data;
    /**
     * Ссылка на следующий узел в списке.
     * Если этот узел является последним в списке, next = null.
     */
    Node<T> next;

    /**
     * Создает новый узел с указанными данными.
     * Ссылка на следующий узел инициализируется значением null.
     *
     * <p>Используется при добавлении новых элементов в конец списка
     * или при создании первого узла пустого списка.</p>
     *
     * @param data данные для хранения в этом узле
     * @throws IllegalArgumentException если переданные данные равны null
     */
    Node(T data) {
        this.data = data;
        this.next = null;
    }

    /**
     * Создает новый узел с указанными данными и ссылкой на следующий узел.
     *
     * <p>Используется при вставке узлов в середину списка или при
     * реорганизации существующих узлов.</p>
     *
     * @param data данные для хранения в этом узле
     * @param next ссылка на следующий узел в списке
     * @throws IllegalArgumentException если переданные данные равны null
     */
    Node(T data, Node<T> next) {
        this.data = data;
        this.next = next;
    }
}